---
---
@inproceedings{CabreraArteaga:2019:SCJ:3358504.3361228,
 author = {Cabrera Arteaga, Javier and Monperrus, Martin and Baudry, Benoit},
 title = {Scalable Comparison of JavaScript V8 Bytecode Traces},
 booktitle = {Proceedings of the 11th ACM SIGPLAN International Workshop on Virtual Machines and Intermediate Languages},
 series = {VMIL 2019},
 abstract={The comparison and alignment of runtime traces are essential, e.g., for semantic analysis or debugging. However, naive sequence alignment algorithms cannot address the needs of the modern web: (i) the bytecode generation process of V8 is not deterministic; (ii) bytecode traces are large.
We present STRAC, a scalable and extensible tool tailored to compare bytecode traces generated by the V8 JavaScript engine. Given two V8 bytecode traces and a distance function between trace events, STRAC computes and provides the best alignment. The key insight is to split access between memory and disk. STRAC can identify semantically equivalent web pages and is capable of processing huge V8 bytecode traces whose order of magnitude matches today's web like this https URL, which generates approx. 150k of V8 bytecode instructions. },
 year = {2019},
 isbn = {978-1-4503-6987-9},
 location = {Athens, Greece},
 pages = {22--31},
 abbr={VMIL 2019 },
 numpages = {10},
 url = {http://doi.acm.org/10.1145/3358504.3361228},
 doi = {10.1145/3358504.3361228},
 acmid = {3361228},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bytecode, JavaScript, Sequence alignment, Similarity measurement, V8},
}


@inproceedings{10.1145/3560828.3564007,
  author = {Cabrera Arteaga, Javier and Laperdrix, Pierre and Monperrus, Martin and Baudry, Benoit},
  title = {Multi-Variant Execution at the Edge},
  year = {2022},
  isbn = {9781450398787},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3560828.3564007},
  doi = {10.1145/3560828.3564007},
  abstract = {Edge-Cloud computing offloads parts of the computations that traditionally occurs in the cloud to edge nodes. The binary format WebAssembly is increasingly used to distribute and deploy services on such platforms. Edge-Cloud computing providers let their clients deploy stateless services in the form of WebAssembly binaries, which are then translated to machine code, sandboxed and executed at the edge. In this context, we propose a technique that (i) automatically diversifies WebAssembly binaries that are deployed to the edge and (ii) randomizes execution paths at runtime. Thus, an attacker cannot exploit all edge nodes with the same payload. Given a service, we automatically synthesize functionally equivalent variants for the functions providing the service. All the variants are then wrapped into a single multivariant WebAssembly binary. When the service endpoint is executed, every time a function is invoked, one of its variants is randomly selected. We implement this technique in the MEWE tool and we validate it with 7 services for which MEWE generates multivariant binaries that embed hundreds of function variants. We execute the multivariant binaries on the world-wide edge platform provided by Fastly, as part as a research collaboration. We show that multivariant binaries exhibit a real diversity of execution traces across the whole edge platform distributed around the globe.},
  booktitle = {Proceedings of the 9th ACM Workshop on Moving Target Defense},
  pages = {11–22},
  numpages = {12},
  keywords = {moving target defense, multivariant execution, edge-cloud computing, webassembly, diversification},
  location = {Los Angeles, CA, USA},
  series = {MTD'22},
  abbr={MTD 2022},
}


@misc{arteaga2020crow,
    title={CROW: Code Diversification for WebAssembly},
    author={Cabrera Arteaga,Javier  and Orestis Floros Malivitsis and Oscar Luis Vera Pérez and Benoit Baudry and Martin Monperrus},
    abstract={The adoption of WebAssembly has rapidly increased in the last few years as it provides a fast and safe model for program execution. However, WebAssembly is not exempt from vulnerabilities that could be exploited by side channels attacks. This class of vulnerabilities that can be addressed by code diversification. In this paper, we present the first fully automated workflow for the diversification of WebAssembly binaries. We present CROW, an open-source tool implementing this workflow. We evaluate CROW's capabilities on 303 C programs and study its use on a real-life security-sensitive program: libsodium, a cryptographic library. Overall, CROW is able to generate diverse variants for 239 out of 303 (79%) small programs. On libsodium, the execution trace changes up to 83.4%. },
    year={2021},
    eprint={2008.07185},
    archivePrefix={arXiv},
    primaryClass={cs.SE},
    url = {https://madweb.work/preprints/madweb21-paper4-pre_print_version.pdf},
    abbr={MADWeb 2021},
}

@inproceedings{10.1145/3397537.3397567,
    author = {Cabrera Arteaga, Javier and Donde, Shrinish and Gu, Jian and Floros, Orestis and Satabin, Lucas and Baudry, Benoit and Monperrus, Martin},
    title = {Superoptimization of WebAssembly Bytecode},
    year = {2020},
    abbr={MoreVM's 2020},
    isbn = {9781450375078},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3397537.3397567},
    doi = {10.1145/3397537.3397567},
    abstract = {Motivated by the fast adoption of WebAssembly, we propose the first functional pipeline to support the superoptimization of WebAssembly bytecode. Our pipeline works over LLVM and Souper. We evaluate our superoptimization pipeline with 12 programs from the Rosetta code project. Our pipeline improves the code section size of 8 out of 12 programs. We discuss the challenges faced in superoptimization of WebAssembly with two case studies.},
    booktitle = {Conference Companion of the 4th International Conference on Art, Science, and Engineering of Programming},
    pages = {36–40},
    numpages = {5},
    keywords = {Web, WebAssembly, LLVM, Optimization, Superoptimization},
    location = {Porto, Portugal},
    series = {<programming> '20}
}

@article{CABRERAARTEAGA2023103296,
title = {WebAssembly Diversification for Malware Evasion},
journal = {Computers & Security},
pages = {103296},
year = {2023},
issn = {0167-4048},
doi = {https://doi.org/10.1016/j.cose.2023.103296},
url = {https://www.sciencedirect.com/science/article/pii/S0167404823002067},
author = {Javier Cabrera-Arteaga and Martin Monperrus and Tim Toady and Benoit Baudry},
keywords = {WebAssembly, cryptojacking, software diversification, malware evasion},
abstract = {WebAssembly has become a crucial part of the modern web, offering a faster alternative to JavaScript in browsers. While boosting rich applications in browser, this technology is also very efficient to develop cryptojacking malware. This has triggered the development of several methods to detect cryptojacking malware. However, these defenses have not considered the possibility of attackers using evasion techniques. This paper explores how automatic binary diversification can support the evasion of WebAssembly cryptojacking detectors. We experiment with a dataset of 33 WebAssembly cryptojacking binaries and evaluate our evasion technique against two malware detectors: VirusTotal, a general-purpose detector, and MINOS, a WebAssembly-specific detector. Our results demonstrate that our technique can automatically generate variants of WebAssembly cryptojacking that evade the detectors in 90% of cases for VirusTotal and 100% for MINOS. Our results emphasize the importance of meta-antiviruses and diverse detection techniques and provide new insights into which WebAssembly code transformations are best suited for malware evasion. We also show that the variants introduce limited performance overhead, making binary diversification an effective technique for evasion.},
  series = {COSE 2023},
  abbr = {COSE 2023}
}

@inproceedings{TODO,
  author = {Cabrera Arteaga, Javier, Nick Fitzgerald, Martin Monperrus and Benoit Baudry},
  title = {wasm-mutate: Fuzzing WebAssembly compilers with e-graphs},
  year = {2022},
  abstract = {},
  location = {San Diego, USA},
  series = {EGRAPHS'22},
  abbr={EGRAPHS'22}
}


@misc{cabreraarteaga2023wasmmutate,
      title = {Wasm-Mutate: Fast and effective binary diversification for WebAssembly},
     journal = {Computers & Security},
     volume = {139},
     pages = {103731},
     year = {2024},
     issn = {0167-4048},
    series = {COSE 2024},
     abbr = {COSE 2024},
     doi = {https://doi.org/10.1016/j.cose.2024.103731},
     url = {https://www.sciencedirect.com/science/article/pii/S0167404824000324},
     author = {Javier Cabrera-Arteaga and Nicholas Fitzgerald and Martin Monperrus and Benoit Baudry},
     abstract = {WebAssembly is the fourth officially endorsed Web language. It is recognized because of its efficiency and design, focused on security. Yet, its swiftly expanding ecosystem lacks robust software diversification systems. We introduce Wasm-Mutate, a diversification engine specifically designed for WebAssembly. Our engine meets several essential criteria: 1) To quickly generate functionally identical, yet behaviorally diverse, WebAssembly variants, 2) To be universally applicable to any WebAssembly program, irrespective of the source programming language, and 3) Generated variants should counter side-channels. By leveraging an e-graph data structure, Wasm-Mutate is implemented to meet both speed and efficacy. We evaluate Wasm-Mutate by conducting experiments on 404 programs, which include real-world applications. Our results highlight that Wasm-Mutate can produce tens of thousands of unique and efficient WebAssembly variants within minutes. Significantly, Wasm-Mutate can safeguard WebAssembly binaries against timing side-channel attacks, especially those of the Spectre type.}
}
