---
---
@inproceedings{CabreraArteaga:2019:SCJ:3358504.3361228,
 author = {Cabrera Arteaga, Javier and Monperrus, Martin and Baudry, Benoit},
 title = {Scalable Comparison of JavaScript V8 Bytecode Traces},
 booktitle = {Proceedings of the 11th ACM SIGPLAN International Workshop on Virtual Machines and Intermediate Languages},
 series = {VMIL 2019},
 abstract={The comparison and alignment of runtime traces are essential, e.g., for semantic analysis or debugging. However, naive sequence alignment algorithms cannot address the needs of the modern web: (i) the bytecode generation process of V8 is not deterministic; (ii) bytecode traces are large.
We present STRAC, a scalable and extensible tool tailored to compare bytecode traces generated by the V8 JavaScript engine. Given two V8 bytecode traces and a distance function between trace events, STRAC computes and provides the best alignment. The key insight is to split access between memory and disk. STRAC can identify semantically equivalent web pages and is capable of processing huge V8 bytecode traces whose order of magnitude matches today's web like this https URL, which generates approx. 150k of V8 bytecode instructions. },
 year = {2019},
 isbn = {978-1-4503-6987-9},
 location = {Athens, Greece},
 pages = {22--31},
 abbr={VMIL 2019 },
 numpages = {10},
 url = {http://doi.acm.org/10.1145/3358504.3361228},
 doi = {10.1145/3358504.3361228},
 acmid = {3361228},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Bytecode, JavaScript, Sequence alignment, Similarity measurement, V8},
} 


@inproceedings{TODO,
    author = {Cabrera Arteaga, Javier and Laperdriex, Pierre and Monperrus, Martin and Baudry, Benoit},
    title = {Multi-Variant Execution at the Edge},
    year = {2021},
    abbr={UNDER REVIEW},
    isbn = {TODO},
    publisher = {Under review},
    address = {TODO},
    url = {https://arxiv.org/abs/2108.08125},
    doi = {},
    abstract = {Edge-cloud computing offloads parts of the computations that traditionally occurs in the cloud to edge nodes, e.g., CDN servers, in order to get closer to the users and reduce latency. To improve performance even further, WebAssembly is increasingly used in this context. Edge-cloud computing providers, such as Fastly or Cloudflare, let their clients deploy stateless services in the form of WebAssembly binaries, which are then translated to machine code and sandboxed for a safe execution at the edge.

In this context, we propose a technique that (i) automatically diversifies WebAssembly binaries that are deployed to the edge and (ii) randomizes execution paths at runtime, turning the execution of the services into a moving target. Given a service to be deployed at the edge, we automatically synthesize functionally equivalent variants for the functions that implement the service. All the variants are then wrapped into a single multivariant WebAssembly binary. When the service endpoint is executed, every time a function is invoked, one of its variants is randomly selected. We implement this technique in the MEWE tool and we validate it with 7 services for cryptography and QR encoding. MEWE generates multivariant binaries that embed hundreds of function variants. We execute the multivariant binaries on the world-wide edge platform provided by Fastly. We show that, at runtime, the multivariant exhibit a remarkable diversity of execution traces, across the whole edge platform.
},
    booktitle = {Under review},
    pages = {TODO},
    numpages = {TODO},
    keywords = {Web, WebAssembly, LLVM, Edge-Cloud computing, Edge, Lucet},
    location = {TODO},
    series = {TODO}
}


@misc{arteaga2020crow,
    title={CROW: Code Diversification for WebAssembly},
    author={Cabrera Arteaga,Javier  and Orestis Floros Malivitsis and Oscar Luis Vera Pérez and Benoit Baudry and Martin Monperrus},
    abstract={The adoption of WebAssembly has rapidly increased in the last few years as it provides a fast and safe model for program execution. However, WebAssembly is not exempt from vulnerabilities that could be exploited by side channels attacks. This class of vulnerabilities that can be addressed by code diversification. In this paper, we present the first fully automated workflow for the diversification of WebAssembly binaries. We present CROW, an open-source tool implementing this workflow. We evaluate CROW's capabilities on 303 C programs and study its use on a real-life security-sensitive program: libsodium, a cryptographic library. Overall, CROW is able to generate diverse variants for 239 out of 303 (79%) small programs. On libsodium, the execution trace changes up to 83.4%. },
    year={2021},
    eprint={2008.07185},
    archivePrefix={arXiv},
    primaryClass={cs.SE},
    url = {https://madweb.work/preprints/madweb21-paper4-pre_print_version.pdf},
    abbr={MADWeb 2021},
}

@inproceedings{10.1145/3397537.3397567,
    author = {Cabrera Arteaga, Javier and Donde, Shrinish and Gu, Jian and Floros, Orestis and Satabin, Lucas and Baudry, Benoit and Monperrus, Martin},
    title = {Superoptimization of WebAssembly Bytecode},
    year = {2020},
    abbr={MoreVM's 2020},
    isbn = {9781450375078},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3397537.3397567},
    doi = {10.1145/3397537.3397567},
    abstract = {Motivated by the fast adoption of WebAssembly, we propose the first functional pipeline to support the superoptimization of WebAssembly bytecode. Our pipeline works over LLVM and Souper. We evaluate our superoptimization pipeline with 12 programs from the Rosetta code project. Our pipeline improves the code section size of 8 out of 12 programs. We discuss the challenges faced in superoptimization of WebAssembly with two case studies.},
    booktitle = {Conference Companion of the 4th International Conference on Art, Science, and Engineering of Programming},
    pages = {36–40},
    numpages = {5},
    keywords = {Web, WebAssembly, LLVM, Optimization, Superoptimization},
    location = {Porto, Portugal},
    series = {<programming> '20}
}
